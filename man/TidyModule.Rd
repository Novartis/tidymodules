% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TidyModule.R
\name{TidyModule}
\alias{TidyModule}
\title{TidyModule R6 Class, parent of all modules}
\description{
This is the main class provided by tidymodules and should be the parent of all tidymodules modules.
It provides methods for defining input and output communication ports, managing module namespace and many other useful features.
}
\examples{

## ------------------------------------------------
## Method `TidyModule$print`
## ------------------------------------------------

MyModule <- R6::R6Class("MyModule", inherit = tidymodules::TidyModule)
m <- MyModule$new()
m
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{id}}{ID of the module.}

\item{\code{name}}{Name of the module as generated or provided by the user.}

\item{\code{module_ns}}{Module namespace, unique identifier for the module.}

\item{\code{parent_ns}}{Parent module namespace in case of nested modules.}

\item{\code{parent_mod}}{Reference to parent module in case of nested modules.}

\item{\code{pass_ports}}{logical value indicating if the module should pass its ports to any nested modules. This is initialized with the \code{inherit} argument of \code{new()}.}

\item{\code{group}}{Group name of the module.}

\item{\code{created}}{Initialization time of the module.}

\item{\code{order}}{Initialization order.}

\item{\code{i}}{reactive list of input ports.}

\item{\code{o}}{reactive list of output ports.}

\item{\code{port_names}}{list of input and output port names.}

\item{\code{react}}{list of reactive objects used by the module.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TidyModule-new}{\code{TidyModule$new()}}
\item \href{#method-TidyModule-ns}{\code{TidyModule$ns()}}
\item \href{#method-TidyModule-getSessionId}{\code{TidyModule$getSessionId()}}
\item \href{#method-TidyModule-render}{\code{TidyModule$render()}}
\item \href{#method-TidyModule-ui}{\code{TidyModule$ui()}}
\item \href{#method-TidyModule-server}{\code{TidyModule$server()}}
\item \href{#method-TidyModule-view}{\code{TidyModule$view()}}
\item \href{#method-TidyModule-definePort}{\code{TidyModule$definePort()}}
\item \href{#method-TidyModule-assignPort}{\code{TidyModule$assignPort()}}
\item \href{#method-TidyModule-addInputPort}{\code{TidyModule$addInputPort()}}
\item \href{#method-TidyModule-updateInputPort}{\code{TidyModule$updateInputPort()}}
\item \href{#method-TidyModule-updateInputPorts}{\code{TidyModule$updateInputPorts()}}
\item \href{#method-TidyModule-getInputPort}{\code{TidyModule$getInputPort()}}
\item \href{#method-TidyModule-iport}{\code{TidyModule$iport()}}
\item \href{#method-TidyModule-getInputPorts}{\code{TidyModule$getInputPorts()}}
\item \href{#method-TidyModule-getInput}{\code{TidyModule$getInput()}}
\item \href{#method-TidyModule-execInput}{\code{TidyModule$execInput()}}
\item \href{#method-TidyModule-updateOutputPort}{\code{TidyModule$updateOutputPort()}}
\item \href{#method-TidyModule-updateOutputPorts}{\code{TidyModule$updateOutputPorts()}}
\item \href{#method-TidyModule-addOutputPort}{\code{TidyModule$addOutputPort()}}
\item \href{#method-TidyModule-getPortName}{\code{TidyModule$getPortName()}}
\item \href{#method-TidyModule-getOutputPort}{\code{TidyModule$getOutputPort()}}
\item \href{#method-TidyModule-oport}{\code{TidyModule$oport()}}
\item \href{#method-TidyModule-getOutputPorts}{\code{TidyModule$getOutputPorts()}}
\item \href{#method-TidyModule-getOutput}{\code{TidyModule$getOutput()}}
\item \href{#method-TidyModule-execOutput}{\code{TidyModule$execOutput()}}
\item \href{#method-TidyModule-getStore}{\code{TidyModule$getStore()}}
\item \href{#method-TidyModule-countInputPort}{\code{TidyModule$countInputPort()}}
\item \href{#method-TidyModule-countOutputPort}{\code{TidyModule$countOutputPort()}}
\item \href{#method-TidyModule-use}{\code{TidyModule$use()}}
\item \href{#method-TidyModule-callModule}{\code{TidyModule$callModule()}}
\item \href{#method-TidyModule-isStored}{\code{TidyModule$isStored()}}
\item \href{#method-TidyModule-isGlobal}{\code{TidyModule$isGlobal()}}
\item \href{#method-TidyModule-getSession}{\code{TidyModule$getSession()}}
\item \href{#method-TidyModule-getGlobalSession}{\code{TidyModule$getGlobalSession()}}
\item \href{#method-TidyModule-doServer}{\code{TidyModule$doServer()}}
\item \href{#method-TidyModule-getPortDef}{\code{TidyModule$getPortDef()}}
\item \href{#method-TidyModule-print}{\code{TidyModule$print()}}
\item \href{#method-TidyModule-deepClone}{\code{TidyModule$deepClone()}}
\item \href{#method-TidyModule-reset}{\code{TidyModule$reset()}}
\item \href{#method-TidyModule-getShinyInput}{\code{TidyModule$getShinyInput()}}
\item \href{#method-TidyModule-getShinyOutput}{\code{TidyModule$getShinyOutput()}}
\item \href{#method-TidyModule-getShinySession}{\code{TidyModule$getShinySession()}}
\item \href{#method-TidyModule-clone}{\code{TidyModule$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-new"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-new}{}}}
\subsection{Method \code{new()}}{
Create a new tidymodules module.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$new(
  id = NULL,
  inherit = TRUE,
  group = NULL,
  parent = NULL,
  collision = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{Unique Id to assign to the module. Default to a generated Id using module's class and order of initialization.}

\item{\code{inherit}}{logical value indicating if a nested module should inherits the parent's input ports. Default to TRUE}

\item{\code{group}}{Module group name. Added to module's Id to make it unique. Optional}

\item{\code{parent}}{Parent module. Need to be specified when creating a dynamic nested module. Optional}

\item{\code{collision}}{Allow module id collision. Default to false.
Id collision happens when you try to creating the same module (same Id) twice at the same time.  Optional}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{TidyModule} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-ns"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-ns}{}}}
\subsection{Method \code{ns()}}{
namespace function used to generate unique Id for HTML elements.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$ns(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{Id of HTML element / shiny input.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A unique string Id.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-getSessionId"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-getSessionId}{}}}
\subsection{Method \code{getSessionId()}}{
Get module session Id. This function rely on a shiny output object to find the right session Id.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$getSessionId()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The Session Id of the module.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-render"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-render}{}}}
\subsection{Method \code{render()}}{
Alias to the \code{ui} function.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$render(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{arguments passed to the ui function.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-ui"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-ui}{}}}
\subsection{Method \code{ui()}}{
UI function generating the module HTML elements.
This function is eventually implemented in the child module to give the module a visual representation.
Please note that a module can have many visual representations.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$ui(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{arguments passed to ui}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Empty tagList()
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-server"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-server}{}}}
\subsection{Method \code{server()}}{
server function to be overwritten and called by child module.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$server(input, output, session, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{shiny input.}

\item{\code{output}}{shiny output.}

\item{\code{session}}{shiny session.}

\item{\code{...}}{extra arguments to passed to the server function.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-view"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-view}{}}}
\subsection{Method \code{view()}}{
Preview the module in a gadget.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$view(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{extra arguments to passed to the server function.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-definePort"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-definePort}{}}}
\subsection{Method \code{definePort()}}{
Function wrapper for port definition expression.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$definePort(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{expression}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-assignPort"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-assignPort}{}}}
\subsection{Method \code{assignPort()}}{
Function wrapper for port assignment expression.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$assignPort(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{expression}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-addInputPort"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-addInputPort}{}}}
\subsection{Method \code{addInputPort()}}{
Add input port function. To be called within \code{definePort} function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$addInputPort(
  name = NULL,
  description = NULL,
  sample = NULL,
  input = FALSE,
  is_parent = FALSE,
  inherit = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{port name. must be a unique input port name.}

\item{\code{description}}{port description.}

\item{\code{sample}}{sample dataset consumed by this port. Mandatory!}

\item{\code{input}}{This argument should be ignored. Only here for backward compatibility.}

\item{\code{is_parent}}{Is the port inherited from the parent module.}

\item{\code{inherit}}{Should the port be passed to nested module. default to TRUE.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-updateInputPort"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-updateInputPort}{}}}
\subsection{Method \code{updateInputPort()}}{
Function for filling an input port.
Called within the \code{assignPort} function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$updateInputPort(id = NULL, input = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{Port name or Id .}

\item{\code{input}}{The reacive object.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-updateInputPorts"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-updateInputPorts}{}}}
\subsection{Method \code{updateInputPorts()}}{
This function add a set of input ports to the module.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$updateInputPorts(inputs = NULL, is_parent = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{inputs}}{reactivevalues with the input ports.}

\item{\code{is_parent}}{Are the ports from a parent module. Default to FALSE.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-getInputPort"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-getInputPort}{}}}
\subsection{Method \code{getInputPort()}}{
Get an input port from the module.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$getInputPort(id = 1)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{Name or Id of the port.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A module input port. A reactivevalues object with name, description, sample, is_parent and port elements.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-iport"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-iport}{}}}
\subsection{Method \code{iport()}}{
Alias to the \code{getInputPort()} function.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$iport(id = 1)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{Name or Id of the port.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A module input port. A reactivevalues object with name, description, sample, is_parent and port elements.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-getInputPorts"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-getInputPorts}{}}}
\subsection{Method \code{getInputPorts()}}{
Get all the input ports as a reactivevalues object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$getInputPorts()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A reactivevalues object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-getInput"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-getInput}{}}}
\subsection{Method \code{getInput()}}{
Get a input port slot.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$getInput(id = 1, w = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{Name or Id of the port.}

\item{\code{w}}{boolean to enable module session check. default to TRUE.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A reactive function.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-execInput"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-execInput}{}}}
\subsection{Method \code{execInput()}}{
Execute an input port slot, that is, the reactive function stored in the port.
The \code{require} argument which is \code{TRUE} by default allows you disable checking if the port is Truthy.
See \code{shiny::req} function.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$execInput(id = 1, require = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{Name or Id of the port.}

\item{\code{require}}{Check that the port is available.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Output of the reacive function execution.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-updateOutputPort"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-updateOutputPort}{}}}
\subsection{Method \code{updateOutputPort()}}{
Function for filling an output port.
Called within the \code{assignPort} function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$updateOutputPort(id = NULL, output = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{Port name or Id .}

\item{\code{output}}{The reacive object.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-updateOutputPorts"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-updateOutputPorts}{}}}
\subsection{Method \code{updateOutputPorts()}}{
This function add a set of output ports to the module.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$updateOutputPorts(outputs = NULL, is_parent = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{outputs}}{reactivevalues with the output ports.}

\item{\code{is_parent}}{Are the ports from a parent module. Default to FALSE.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-addOutputPort"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-addOutputPort}{}}}
\subsection{Method \code{addOutputPort()}}{
Add output port function. To be called within \code{definePort} function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$addOutputPort(
  name = NULL,
  description = NULL,
  sample = NULL,
  output = FALSE,
  is_parent = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{port name. must be a unique output port name.}

\item{\code{description}}{port description.}

\item{\code{sample}}{sample dataset returned by this port. Mandatory!}

\item{\code{output}}{This argument should be ignored. Only here for backward compatibility.}

\item{\code{is_parent}}{Is the port inherited from the parent module.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-getPortName"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-getPortName}{}}}
\subsection{Method \code{getPortName()}}{
Utility function that returns a port name from the Id.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$getPortName(id = NULL, type = "input")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{Port Id}

\item{\code{type}}{Port type, input or output.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Port name.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-getOutputPort"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-getOutputPort}{}}}
\subsection{Method \code{getOutputPort()}}{
Get an output port from the module.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$getOutputPort(id = 1)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{Name or Id of the port.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A module output port. A reactivevalues object with name, description, sample, is_parent and port elements.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-oport"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-oport}{}}}
\subsection{Method \code{oport()}}{
Alias to the \code{getOutputPort()} function.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$oport(id = 1)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{Name or Id of the port.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A module output port. A reactivevalues object with name, description, sample, is_parent and port elements.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-getOutputPorts"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-getOutputPorts}{}}}
\subsection{Method \code{getOutputPorts()}}{
Get all the output ports as a reactivevalues object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$getOutputPorts()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A reactivevalues object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-getOutput"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-getOutput}{}}}
\subsection{Method \code{getOutput()}}{
Get a output port slot.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$getOutput(id = 1, w = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{Name or Id of the port.}

\item{\code{w}}{boolean to enable module session check. default to TRUE.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A reactive function.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-execOutput"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-execOutput}{}}}
\subsection{Method \code{execOutput()}}{
Execute an output port slot, that is, the reactive function stored in the port.
The \code{require} argument which is \code{TRUE} by default allows you disable checking if the port is Truthy.
See \code{shiny::req} function.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$execOutput(id = 1, require = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{Name or Id of the port.}

\item{\code{require}}{Check that the port is available.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Output of the reacive function execution.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-getStore"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-getStore}{}}}
\subsection{Method \code{getStore()}}{
Function for retrieving the central ModStore.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$getStore()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The \code{ModStore} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-countInputPort"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-countInputPort}{}}}
\subsection{Method \code{countInputPort()}}{
Utility function that counts the number of input ports.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$countInputPort()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The input ports count.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-countOutputPort"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-countOutputPort}{}}}
\subsection{Method \code{countOutputPort()}}{
Utility function that counts the number of output ports.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$countOutputPort()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The output ports count.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-use"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-use}{}}}
\subsection{Method \code{use()}}{
Alias to the \code{callModule} function.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$use(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{arguments passed to the \code{server} function of the module.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-callModule"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-callModule}{}}}
\subsection{Method \code{callModule()}}{
callModule function. Similar to shiny callModule. Used to inject the server logic into the application.
This function don't need the user to provide a namespace Id as a module already knows its identity.
Options provided as arguments will be passed to the server function of the module.
Note that the module reference \code{self} might not be the one injected.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$callModule(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{arguments passed to the \code{server} function of the module.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-isStored"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-isStored}{}}}
\subsection{Method \code{isStored()}}{
Function to check if the module is store in the current session.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$isStored()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
logical value.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-isGlobal"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-isGlobal}{}}}
\subsection{Method \code{isGlobal()}}{
Check if the session attached to the module is the \code{global_session}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$isGlobal()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
logical value.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-getSession"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-getSession}{}}}
\subsection{Method \code{getSession()}}{
Get the current session.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$getSession()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A reactivevalues object with the following elements.
aid = application Id
path = application path
sid = session Id
count = current module count
created = session creation time
updated = session update time
collection = list of session modules
edges = list of connection edges
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-getGlobalSession"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-getGlobalSession}{}}}
\subsection{Method \code{getGlobalSession()}}{
Get the global session.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$getGlobalSession()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A reactivevalues object with the following elements.
aid = application Id
path = application path
sid = "global_session"
count = session module count
created = session creation time
updated = session update time
collection = list of session modules
edges = empty data.frame
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-doServer"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-doServer}{}}}
\subsection{Method \code{doServer()}}{
Function interfacing with shiny's callModule.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$doServer(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{arguments passed to the \code{server} function of the module.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-getPortDef"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-getPortDef}{}}}
\subsection{Method \code{getPortDef()}}{
Utility function to retrieve a port definition in the form of a list.
This is a useful function to learn about a specific port.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$getPortDef(type = NULL, id = 1)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{Port type, input or output.}

\item{\code{id}}{Name or Id of port.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List of the port definition.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-print"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-print}{}}}
\subsection{Method \code{print()}}{
Module printing function.
Print the structure of a module.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$print()}\if{html}{\out{</div>}}
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{MyModule <- R6::R6Class("MyModule", inherit = tidymodules::TidyModule)
m <- MyModule$new()
m
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-deepClone"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-deepClone}{}}}
\subsection{Method \code{deepClone()}}{
Module cloning function.
Take care of ports (cloning reactive objects) and nested modules.
Note that the Ids/namespace are not changed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$deepClone(o = NULL, i = NULL, s = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{o}}{Optional shiny output.}

\item{\code{i}}{Optional shiny input}

\item{\code{s}}{Optional shiny input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A cloned module.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-reset"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-reset}{}}}
\subsection{Method \code{reset()}}{
This function reset the ports.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$reset(o = NULL, i = NULL, s = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{o}}{Optional shiny output.}

\item{\code{i}}{Optional shiny input}

\item{\code{s}}{Optional shiny input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-getShinyInput"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-getShinyInput}{}}}
\subsection{Method \code{getShinyInput()}}{
Retrieve the shiny input.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$getShinyInput()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Shiny input object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-getShinyOutput"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-getShinyOutput}{}}}
\subsection{Method \code{getShinyOutput()}}{
Retrieve the shiny output.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$getShinyOutput()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Shiny output object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-getShinySession"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-getShinySession}{}}}
\subsection{Method \code{getShinySession()}}{
Retrieve the shiny output.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$getShinySession()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Shiny session object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TidyModule-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TidyModule-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TidyModule$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
