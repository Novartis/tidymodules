% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ModStore.R
\name{ModStore}
\alias{ModStore}
\title{R6 Class Representing a ModStore}
\description{
This class is used to create a storage for tidymodules objects.
}
\details{
Manage applications, sessions and modules.
}
\examples{

## ------------------------------------------------
## Method `ModStore$new`
## ------------------------------------------------

MyModule <- R6::R6Class("MyModule", inherit = tidymodules::TidyModule)
m <- MyModule$new()
s <- m$getStore()

## ------------------------------------------------
## Method `ModStore$isStored`
## ------------------------------------------------

MyModule <- R6::R6Class("MyModule", inherit = tidymodules::TidyModule)
m <- MyModule$new()
s <- m$getStore()
s$isStored(m)
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{ModStore$new()}}
\item \href{#method-isStored}{\code{ModStore$isStored()}}
\item \href{#method-getGlobalSession}{\code{ModStore$getGlobalSession()}}
\item \href{#method-getSession}{\code{ModStore$getSession()}}
\item \href{#method-getSessions}{\code{ModStore$getSessions()}}
\item \href{#method-getMods}{\code{ModStore$getMods()}}
\item \href{#method-getEdges}{\code{ModStore$getEdges()}}
\item \href{#method-addEdge}{\code{ModStore$addEdge()}}
\item \href{#method-addMod}{\code{ModStore$addMod()}}
\item \href{#method-delMod}{\code{ModStore$delMod()}}
\item \href{#method-print}{\code{ModStore$print()}}
\item \href{#method-clone}{\code{ModStore$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
Create a new ModStore object.
Should be called once by the TidyModule class.
Not to be called directly outside TidyModule.
The ModStore object can be retrieved from any TidyModule object, see example below.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModStore$new()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A new \code{ModStore} object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{MyModule <- R6::R6Class("MyModule", inherit = tidymodules::TidyModule)
m <- MyModule$new()
s <- m$getStore()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-isStored"></a>}}
\subsection{Method \code{isStored()}}{
Check if a module is stored in the current session.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModStore$isStored(m)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{m}}{TidyModule object.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{MyModule <- R6::R6Class("MyModule", inherit = tidymodules::TidyModule)
m <- MyModule$new()
s <- m$getStore()
s$isStored(m)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getGlobalSession"></a>}}
\subsection{Method \code{getGlobalSession()}}{
Retrieve the global session 'global_session'.
This is the session that exists outside the application server function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModStore$getGlobalSession()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSession"></a>}}
\subsection{Method \code{getSession()}}{
Retrieve a module session.
This could be the global session or a user session.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModStore$getSession(m)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{m}}{TidyModule object.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSessions"></a>}}
\subsection{Method \code{getSessions()}}{
Retrieve all sessions.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModStore$getSessions()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getMods"></a>}}
\subsection{Method \code{getMods()}}{
Retrieve all modules.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModStore$getMods(m)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{m}}{TidyModule object.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getEdges"></a>}}
\subsection{Method \code{getEdges()}}{
Retrieve modules connections.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModStore$getEdges(m)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{m}}{TidyModule object.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-addEdge"></a>}}
\subsection{Method \code{addEdge()}}{
Add modules connections into ModStore.
An edge is either a connection between a reactive object and a module
or between two modules.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModStore$addEdge(from, to, mode = "direct", comment = NA)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{from}}{list with three elements: m -> module, type -> input or output, port -> port Id.}

\item{\code{to}}{list with three elements: m -> module, type -> input or output, port -> port Id.}

\item{\code{mode}}{The type of edge, default to 'direct'.}

\item{\code{comment}}{Any additional comment.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-addMod"></a>}}
\subsection{Method \code{addMod()}}{
Add module into the ModStore.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModStore$addMod(m)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{m}}{TidyModule object.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-delMod"></a>}}
\subsection{Method \code{delMod()}}{
Delete a module from the ModStore.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModStore$delMod(m)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{m}}{TidyModule object.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\subsection{Method \code{print()}}{
Print the ModStore object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModStore$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ModStore$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
